# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'welcome_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (
    QApplication,
    QMainWindow,
    QFormLayout,
    QLineEdit,
    QButtonGroup,
    QComboBox,
)
from dateSelector import *


def fontOnly(fontFamily: str, pointSize: int, bold=False):
    font = QtGui.QFont()
    font.setFamily(fontFamily)
    font.setBold(bold)
    font.setPointSize(pointSize)
    return font


class RegisterWindow(QMainWindow):
    def __init__(self):
        super(RegisterWindow, self).__init__()
        self._translate = QtCore.QCoreApplication.translate
        self.statusbar = QtWidgets.QStatusBar(self)
        self.menubar = QtWidgets.QMenuBar(self)
        self.centralwidget = QtWidgets.QWidget(self)
        self.title = self.labelOnly(20, 25, 300, 41, "Register Subject", "title", 12)
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.btSubmit = QtWidgets.QPushButton(self.centralwidget)

        self.fNameLabel, self.fNameEdit = self.labelEditCombo(20, 90, 150, 20, "First Name:", "fNameLabel", "fNameEdit")
        self.lNameLabel, self.lNameEdit = self.labelEditCombo(20, 150, 150, 20, "Last Name:", "lNameLabel", "lNameEdit")
        self.natLabel, self.natEdit = self.labelEditCombo(20, 210, 150, 20, "Nationality:", "natLabel", "natEdit")
        self.dateLabel = self.labelOnly(20, 270, 150, 20, "Date of Birth:", "dateLabel", 9)
        self.yearCombo = self.comboOnly(120, 270, 70, 40, "yearCombo", years(), True)
        self.monthCombo = self.comboOnly(190, 270, 100, 40, "monthCombo", months(), False)
        self.dayCombo = self.comboOnly(290, 270, 70, 40, "dayCombo",
                                       days(str(self.yearCombo.currentText()), str(self.monthCombo.currentText()), 0),
                                       False)
        self.genderLabel = self.labelOnly(20, 320, 100, 20, "Gender:", "genderLabel", 10)
        self.maleRadio = self.radioButton(120, 320, 100, 40, "maleRadio", "Male")
        self.femaleRadio = self.radioButton(120, 360, 100, 40, "femaleRadio", "Female")
        self.otherRadio = self.radioButton(120, 400, 150, 40, "otherRadio", "Prefer not to say")
        self.genderGroup = QButtonGroup(self.centralwidget)
        self.genderGroup.addButton(self.maleRadio, 1)
        self.genderGroup.addButton(self.femaleRadio, 2)
        self.genderGroup.addButton(self.otherRadio, 3)

        self.domLabel = self.labelOnly(450, 90, 150, 20, "Dominant Hand:", "domLabel", 10)
        self.rightRadio = self.radioButton(600, 85, 100, 40, "rightRadio", "Right")
        self.leftRadio = self.radioButton(600, 125, 100, 40, "leftRadio", "Left")
        self.ambRadio = self.radioButton(600, 165, 150, 40, "ambRadio", "Ambidextrous")
        self.domGroup = QButtonGroup(self.centralwidget)
        self.domGroup.addButton(self.rightRadio, 1)
        self.domGroup.addButton(self.leftRadio, 2)
        self.domGroup.addButton(self.ambRadio, 3)

        self.subLabel = self.labelOnly(450, 230, 150, 30, "Subgroup:", "subLabel", 10)
        self.noStrokeRadio = self.radioButton(600, 225, 150, 40, "noStrokeRadio", "No Previous Stroke")
        self.strokeRadio = self.radioButton(600, 265, 150, 40, "leftRadio", "Previous Stroke")
        self.strokeGroup = QButtonGroup(self.centralwidget)
        self.strokeGroup.addButton(self.noStrokeRadio, 1)
        self.strokeGroup.addButton(self.strokeRadio, 2)

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.setWindowIcon(QtGui.QIcon('Icon.png'))
        self.setFixedSize(800, 560)
        self.setFont(fontOnly("Bookman Old Style", 22))
        self.centralwidget.setObjectName("centralwidget")
        self.logo.setGeometry(QtCore.QRect(670, 20, 115, 33))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("EPFL Logo.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")

        self.title.setScaledContents(True)
        self.title.setWordWrap(True)

        self.yearCombo.activated.connect(self.toggleCombos)

        self.monthCombo.activated.connect(self.toggleCombos1)

        self.btSubmit.setGeometry(QtCore.QRect(300, 460, 136, 42))
        self.btSubmit.setStyleSheet("border-radius: 4px; "
                                    "color: white; "
                                    "background-color : #005FB8")
        self.btSubmit.setFont(fontOnly("Arial", 13))
        self.btSubmit.setObjectName("btRegister")
        self.btSubmit.clicked.connect(self.launchRegisterSession)

        self.setCentralWidget(self.centralwidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 51))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        self.setWindowTitle(self._translate("MainWindow", "EPFL Smart Kitchen Recorder"))
        # self.title.setText(self._translate("MainWindow", "Register Subject"))
        self.btSubmit.setText(self._translate("MainWindow", "Submit"))

    def launchRegisterSession(self):
        self.close()

    def labelEditCombo(self, xpos, ypos, width, height, labelName: str, labelObjectName: str, editObjectName: str):
        label = self.labelOnly(xpos, ypos, width, height, labelName, labelObjectName, 10)

        edit = QLineEdit(self.centralwidget)
        edit.setGeometry(QtCore.QRect(xpos + 100, ypos, width + 100, height + 10))
        edit.setFont(fontOnly("Segoe UI", 10))
        edit.setObjectName(editObjectName)
        edit.setStyleSheet("color: #52575C; ")
        return label, edit

    def labelOnly(self, xpos, ypos, width, height, labelName: str, labelObjectName: str, pointSize: int):
        label = QtWidgets.QLabel(self.centralwidget)
        label.setGeometry(QtCore.QRect(xpos, ypos, width, height))
        label.setFont(fontOnly("Segoe UI", pointSize))
        label.setObjectName(labelObjectName)
        label.setStyleSheet("color: #52575C; ")
        label.setText(self._translate("MainWindow", labelName))
        return label

    def comboOnly(self, xpos, ypos, width, height, objectName: str, items: list, enabled: bool):
        combo = QComboBox(self.centralwidget)
        combo.setEnabled(enabled)
        combo.addItems(items)
        combo.setGeometry(QtCore.QRect(xpos, ypos, width, height))
        combo.setFont(fontOnly("Segoe UI", 10))
        combo.setObjectName(objectName)
        combo.setStyleSheet("color: #52575C; ")
        return combo

    def toggleCombos(self):
        if self.yearCombo.currentIndex() > 0:
            self.monthCombo.setCurrentIndex(0)
            self.monthCombo.setEnabled(True)
        else:
            self.monthCombo.setCurrentIndex(0)
            self.monthCombo.setEnabled(False)
        self.toggleCombos1()

    def toggleCombos1(self):
        if self.monthCombo.currentIndex() > 0:
            self.dayCombo.clear()
            self.dayCombo.addItems(days(str(self.yearCombo.currentText()), str(self.monthCombo.currentIndex()), 1))
            self.dayCombo.update()
            self.dayCombo.setEnabled(True)
        else:
            self.dayCombo.clear()
            self.dayCombo.addItems(days(str(self.yearCombo.currentText()), str(self.monthCombo.currentText()), 0))
            self.dayCombo.update()
            self.dayCombo.setCurrentIndex(0)
            self.dayCombo.setEnabled(False)

    def radioButton(self, xpos, ypos, width, height, objectName: str, radioText):
        radioButton = QtWidgets.QRadioButton(self.centralwidget)
        radioButton.setGeometry(QtCore.QRect(xpos, ypos, width, height))
        radioButton.setFont(fontOnly("Segoe UI", 10))
        radioButton.setObjectName(objectName)
        radioButton.setStyleSheet("color: #52575C; ")
        radioButton.setText(self._translate("MainWindow", radioText))
        return radioButton


if __name__ == "__main__":
    import sys

    app = QApplication(sys.argv)
    # mainWindow = QtWidgets.QMainWindow()
    ui = RegisterWindow()
    ui.setupUi()
    ui.show()
    sys.exit(app.exec_())
